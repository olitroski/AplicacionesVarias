setwd("C:\Users\olitr\Desktop\Stroop 20 años\Stroop-Chile2013 NIH 21y\Stroop-Chile2013 NIH 21y")
archivos <- dir()
archivos <- archivos[grep(".txt", archivos)]
file <- archivos[5]
file
setwd("C:\Users\olitr\Desktop\Stroop 20 años\Stroop-Chile2013 NIH 21y\Stroop-Chile2013 NIH 21y")
setwd("C:/Users/olitr/Desktop/Stroop 20 años/Stroop-Chile2013 NIH 21y/Stroop-Chile2013 NIH 21y")
archivos <- dir()
archivos <- archivos[grep(".txt", archivos)]
file <- archivos[5]
file
lines <- readLines(file)
## Funcion leer el archivo de un sujeto
read.file <- function(file=NULL){
# Lee y chequea el file
lines <- readLines(file)
if (length(lines)==0){
cat(file, " En blanco \n")
return("blanco")
next()
}
# Crea un data.frame con la info de la cabecera
info <- c(lines[16], lines[14], lines[13])
info <- str_split_fixed(info, ":", 2)
info <- data.frame(t(info[,2]), stringsAsFactors=FALSE)
info <- select(info, 1:3)
names(info) <- c("subject", "fecha", "experiment")
# Usar las tabulaciones del archivo para filtrar lo que sirve
lines <- lines[grep("\t", lines)]
lines <- sub("\t", "", lines)
# Resultado
return(list(info = info, stroop=lines))
}
file.list <- read.file(file)
library(stringr)
library(stringr)
library(dplyr)
library(openxlsx)
file.list <- read.file(file)
info <- file.list[["info"]]
data <- file.list[["stroop"]]
index <- data.frame(ini=grep("* LogFrame Start *", data), fin=grep("* LogFrame End *", data))
index
index <- mutate(index, ini = ini + 1, fin = fin - 1)
index
# entre CV y NIH son diferentes y cada trial tiene diferente numero de lineas en el txt.
if (dim(index)[1] == 60){
trial.data <- data.frame(nvar = 1:20)
} else if (dim(index)[1] == 72){
trial.data <- data.frame(nvar = 1:19)
} else {
cat("dramon \n")
exit()
}
i <- 1
trial <- data[c(index[i,1]:index[i,2])]
trial
length(trial)
for (i in 1:dim(index)[1]){
trial <- data[c(index[i,1]:index[i,2])]
print(length(trial)
}
for (i in 1:dim(index)[1]){
trial <- data[c(index[i,1]:index[i,2])]
print(length(trial))
}
trial <- data[c(index[i,1]:index[i,2])]
trial <- str_split_fixed(trial, ":", 2)
trial <- data.frame(trial, stringsAsFactors=FALSE)
trial
names(trial)[2] <- paste("trial.", i, sep="")
trial
trial.name <- data.frame(variable = trial[[1]], stringsAsFactors=FALSE)
trial <- select(trial, 2)
trial.data <- cbind(trial.data, trial)
trial
trial.names <- data[c(index[i,1]:index[i,2])]
trial.names <- data.frame(variable = trial[[1]], stringsAsFactors=FALSE)
trial.names
# entre CV y NIH son diferentes y cada trial tiene diferente numero de lineas en el txt.
if (dim(index)[1] == 60){
trial.data <- data.frame(nvar = 1:20)
} else if (dim(index)[1] == 72){
trial.data <- data.frame(nvar = 1:19)
} else {
cat("dramon \n")
exit()
}
# Pasar el index por la databbb     i <- 1
# Cada Trial tiene 20 lineas, las pasa a un data.frame como columna
# Nombre de las filas
trial.names <- data[c(index[i,1]:index[i,2])]
trial.names <- data.frame(variable = trial[[1]], stringsAsFactors=FALSE)
for (i in 1:dim(index)[1]){
# Captura
trial <- data[c(index[i,1]:index[i,2])]
trial <- str_split_fixed(trial, ":", 2)
trial <- data.frame(trial, stringsAsFactors=FALSE)
names(trial)[2] <- paste("trial.", i, sep="")
trial <- select(trial, 2)
# Pega la columna
trial.data <- cbind(trial.data, trial)
}
trial.data <- cbind(trial.names, trial.data)
View(trial.data)
trial.names
trial.names <- data[c(index[1,1]:index[1,2])]
trial.names
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data <- data.frame(variable = trial[[1]], stringsAsFactors=FALSE)
trial.data
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data <- data.frame(variable = trial.data[[1]], stringsAsFactors=FALSE)
trial.data
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data
trial.data <- data.frame(variable = trial.data, stringsAsFactors=FALSE)
trial.data
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data <- str_split_fixed(trial.data, ":", 2)[1]
trial.data <- data.frame(variable = trial.data, stringsAsFactors=FALSE)
trial.data
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data <- str_split(trial.data, ":", 2, simplify = TRUE)[1]
trial.data
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data <- str_split(trial.data, ":", 2, simplify = TRUE)[[1]]
trial.data
trial.data <- data[c(index[1,1]:index[1,2])]
str_split(trial.data, ":", 2, simplify = TRUE)
trial.data <- str_split(trial.data, ":", 2, simplify = TRUE)[, 2]
trial.data
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data <- str_split(trial.data, ":", 2, simplify = TRUE)[, 1]
trial.data
trial.data <- data.frame(variable = trial.data, stringsAsFactors=FALSE)
trial.data
trial <- data[c(index[i,1]:index[i,2])]
trial <- str_split_fixed(trial, ":", 2)
trial <- data.frame(trial, stringsAsFactors=FALSE)
trial
trial <- data[c(index[i,1]:index[i,2])]
trial <- str_split_fixed(trial, ":", 2)
trial <- data.frame(trial, stringsAsFactors=FALSE)
trial <- select(trial, 2)
names(trial) <- paste("trial.", i, sep="")
trial
# Nombre de las filas
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data <- str_split(trial.data, ":", 2, simplify = TRUE)[, 1]
trial.data <- data.frame(variable = trial.data, stringsAsFactors=FALSE)
for (i in 1:nrow(index)){
# Captura
trial <- data[c(index[i,1]:index[i,2])]
trial <- str_split_fixed(trial, ":", 2)
trial <- data.frame(trial, stringsAsFactors=FALSE)
trial <- select(trial, 2)
names(trial) <- paste("trial.", i, sep="")
# Pega la columna
trial.data <- cbind(trial.data, trial)
}
View(trial.data)
View(trial.data)
trial.data <- select(trial.data, -nvar, -variable)
varnames <- trial.data[[1]]
trial.data <- select(trial.data, -variable)
trial.data <- data.frame(t(trial.data), stringsAsFactors=FALSE)
names(trial.data) <- varnames
trial.data
source('D:/OneDrive/INTA/AplicacionesVarias/Stroop/NIH 21y/Stroop-Chile2013 NIH 21y/script_stroop_tradicional.r', encoding = 'WINDOWS-1252', echo=TRUE)
lines <- readLines(file)
# Checa file en blanco
if (length(lines)==0){
stroop <- paste(file, "En blanco")
}
lines[1:20]
lines[1:21]
file
lines[1:21]
a - lines[1:21]
a <- lines[1:21]
View(a)
head <- lineas[1:21]
lineas <- readLines(file)
if (length(lineas)==0){
stroop <- paste(file, "En blanco")
}
# Crea un data.frame con la info de la cabecera
head <- lineas[1:21]
head
grep("Experiment")
grep("Experiment", head)
head <- lineas[1:21]
head <- c(lineas[grep("Experiment", head)],
lineas[grep("Subject", head)],
lineas[grep("SessionDate", lineas)])
head
head <- lineas[1:21]
head <- c(lineas[grep("Experiment", head)],
lineas[grep("Subject", head)],
lineas[grep("SessionDate", lineas)[1]])
head
grep("SessionDate", lineas)
head <- lineas[1:21]
head <- c(lineas[grep("Experiment", head)],
lineas[grep("Subject", head)],
lineas[grep("SessionDate", head)])
head
head <- lineas[1:21]
head <- c(lineas[grep("Experiment", head)],
lineas[grep("Subject", head)],
lineas[grep("SessionDate", head)],
lineas[grep("SessionTime", head)],
lineas[grep("Session", head)])
head
head <- lineas[1:21]
head <- c(lineas[grep("Experiment", head)],
lineas[grep("Subject", head)],
lineas[grep("SessionDate", head)],
lineas[grep("SessionTime", head)],
lineas[grep("Session:", head)])
source('D:/OneDrive/INTA/AplicacionesVarias/Stroop/NIH 21y/Stroop-Chile2013 NIH 21y/script_stroop_tradicional.r', encoding = 'WINDOWS-1252', echo=TRUE)
head
head <- lineas[1:21]
head <- c(lineas[grep("Experiment", head)],
lineas[grep("Subject", head)],
lineas[grep("SessionDate", head)],
lineas[grep("SessionTime", head)],
lineas[grep("Session:", head)])
head
head <- lineas[1:21]
head <- c(lineas[grep("Experiment", head)],
lineas[grep("Subject", head)],
lineas[grep("SessionDate", head)],
lineas[grep("SessionTime", head)],
lineas[grep("Session:", head)])
lineas <- readLines(file)
# Checa file en blanco
if (length(lineas)==0){
stroop <- paste(file, "En blanco")
}
head <- lineas[1:21]
head <- c(lineas[grep("Experiment", head)],
lineas[grep("Subject", head)],
lineas[grep("SessionDate", head)],
lineas[grep("SessionTime", head)],
lineas[grep("Session:", head)])
head
str_split(head, ":", simplify = TRUE)
str_split(head, " :", simplify = TRUE)
str_split(head, ": ", simplify = TRUE)
head
head <- data.frame(t(head), stringsAsFactors = FALSE)
head
head <- lineas[1:21]
head <- c(lineas[grep("Experiment", head)],
lineas[grep("Subject", head)],
lineas[grep("SessionDate", head)],
lineas[grep("SessionTime", head)],
lineas[grep("Session:", head)])
head <- str_split(head, ": ", simplify = TRUE)
head <- data.frame(t(head), stringsAsFactors = FALSE)
head
names(head) <- head[1,]
head
head[1,] <- NULL
head <- head[-1,]
head
source('D:/OneDrive/INTA/AplicacionesVarias/Stroop/NIH 21y/Stroop-Chile2013 NIH 21y/script_stroop_tradicional.r', encoding = 'WINDOWS-1252', echo=TRUE)
is.null(linesData$stroop)
# Corrección por si viene en blanco desde la otra funcion
if (is.null(linesData$stroop)){
trial.data <- NULL
return(trial.data)
}
# Captura la lista
info <- file.list[["info"]]
data <- file.list[["stroop"]]
# Indice para capturar trials
index <- data.frame(ini=grep("* LogFrame Start *", data), fin=grep("* LogFrame End *", data))
index <- mutate(index, ini = ini + 1, fin = fin - 1)
# Nombre de las filas
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data <- str_split(trial.data, ":", 2, simplify = TRUE)[, 1]
trial.data <- data.frame(variable = trial.data, stringsAsFactors=FALSE)
# Corrección por si viene en blanco desde la otra funcion
if (is.null(linesData$stroop)){
trial.data <- NULL
return(trial.data)
}
info <- file.list[["info"]]
data <- file.list[["stroop"]]
info <- linesData[["info"]]
data <- linesData[["stroop"]]
index <- data.frame(ini=grep("* LogFrame Start *", data), fin=grep("* LogFrame End *", data))
index <- mutate(index, ini = ini + 1, fin = fin - 1)
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data <- str_split(trial.data, ":", 2, simplify = TRUE)[, 1]
trial.data <- data.frame(variable = trial.data, stringsAsFactors=FALSE)
for (i in 1:nrow(index)){
# Captura
trial <- data[c(index[i,1]:index[i,2])]
trial <- str_split_fixed(trial, ":", 2)
trial <- data.frame(trial, stringsAsFactors=FALSE)
trial <- select(trial, 2)
names(trial) <- paste("trial.", i, sep="")
# Pega la columna
trial.data <- cbind(trial.data, trial)
}
View(trial.data)
trial.data[,1:3]
trial.data[,c(2,17,23)]
trial.data[,c(1, 2, 17, 23)]
varnames <- trial.data[[1]]
trial.data <- select(trial.data, -variable)
trial.data <- data.frame(t(trial.data), stringsAsFactors=FALSE)
names(trial.data) <- varnames
row.names(trial.data) <- NULL
info
file
source('D:/OneDrive/INTA/AplicacionesVarias/Stroop/NIH 21y/Stroop-Chile2013 NIH 21y/script_stroop_tradicional.r', encoding = 'WINDOWS-1252', echo=TRUE)
# Corrección por si viene en blanco desde la otra funcion
if (is.null(linesData$stroop)){
trial.data <- NULL
return(trial.data)
}
# Captura la lista
info <- linesData[["info"]]
data <- linesData[["stroop"]]
# Indice para capturar trials
index <- data.frame(ini=grep("* LogFrame Start *", data), fin=grep("* LogFrame End *", data))
index <- mutate(index, ini = ini + 1, fin = fin - 1)
# Nombre de las filas
trial.data <- data[c(index[1,1]:index[1,2])]
trial.data <- str_split(trial.data, ":", 2, simplify = TRUE)[, 1]
trial.data <- data.frame(variable = trial.data, stringsAsFactors=FALSE)
for (i in 1:nrow(index)){
# Captura
trial <- data[c(index[i,1]:index[i,2])]
trial <- str_split_fixed(trial, ":", 2)
trial <- data.frame(trial, stringsAsFactors=FALSE)
trial <- select(trial, 2)
names(trial) <- paste("trial.", i, sep="")
# Pega la columna
trial.data <- cbind(trial.data, trial)
}
# Transpuesto
varnames <- trial.data[[1]]
trial.data <- select(trial.data, -variable)
trial.data <- data.frame(t(trial.data), stringsAsFactors=FALSE)
names(trial.data) <- varnames
row.names(trial.data) <- NULL
# Agregar la data del sujeto
trial.data <- mutate(trial.data,
sujeto = info[1, "Subject"],
fecha = info[1, "SessionTime"],
exp = info[1, "Experiment"])
View(trial.data)
info
source('D:/OneDrive/INTA/AplicacionesVarias/Stroop/NIH 21y/Stroop-Chile2013 NIH 21y/script_stroop_tradicional.r', encoding = 'WINDOWS-1252', echo=TRUE)
View(tidyData)
info <- linesData[["info"]]
info
source('D:/OneDrive/INTA/AplicacionesVarias/Stroop/NIH 21y/Stroop-Chile2013 NIH 21y/script_stroop_tradicional.r', encoding = 'WINDOWS-1252', echo=TRUE)
